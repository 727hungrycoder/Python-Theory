Python filter Function Examples
Let us see a few examples of the filter() function in Python.

Python Filter Function with a Custom Function
In this example, we are using the filter function along with a custom function “fun()” to filter out vowels from the Python List.


# function that filters vowels
def fun(variable):
    letters = ['a', 'e', 'i', 'o', 'u']
    if (variable in letters):
        return True
    else:
        return False
 
 
# sequence
sequence = ['g', 'e', 'e', 'j', 'k', 's', 'p', 'r']
 
# using filter function
filtered = filter(fun, sequence)
 
print('The filtered letters are:')
for s in filtered:
    print(s)
Output:

The filtered letters are:
e
e

Filter Function in Python with Lambda
Python filter() function is normally used with Lambda functions. In this example, we are using the lambda function to filter out the odd and even numbers from a list.


# a list contains both even and odd numbers. 
seq = [0, 1, 2, 3, 5, 8, 13]
 
# result contains odd numbers of the list
result = filter(lambda x: x % 2 != 0, seq)
print(list(result))
 
# result contains even numbers of the list
result = filter(lambda x: x % 2 == 0, seq)
print(list(result))
Output:

[1, 3, 5, 13]
[0, 2, 8]

Filter Function in Python with Lambda and Custom Function
In this program, we will use both a custom function “is_multiple_of_3()” as well as a lambda function. The filter() function is used to apply this function to each element of the numbers list, and the lambda function is used to iterate over each element of the list before applying the condition. This way, we can perform additional operations on each element before applying the condition.


# Define a function to check 
# if a number is a multiple of 3
def is_multiple_of_3(num):
    return num % 3 == 0
 
 
# Create a list of numbers to filter
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
 
# Use filter and a lambda function to
# filter the list of numbers and only
# keep the ones that are multiples of 3
result = list(filter(lambda x: is_multiple_of_3(x), numbers))
 
# Print the result
print(result)
Output
[3, 6, 9]


sing Operator Functions

reduce() can also be combined with operator functions to achieve the similar functionality as with lambda functions and makes the code more readable.


# python code to demonstrate working of reduce() 
# using operator functions 
  
# importing functools for reduce() 
import functools 
  
# importing operator for operator functions 
import operator 
  
# initializing list 
lis = [1, 3, 5, 6, 2] 
  
# using reduce to compute sum of list 
# using operator functions 
print("The sum of the list elements is : ", end="") 
print(functools.reduce(operator.add, lis)) 
  
# using reduce to compute product 
# using operator functions 
print("The product of list elements is : ", end="") 
print(functools.reduce(operator.mul, lis)) 
  
# using reduce to concatenate string 
print("The concatenated product is : ", end="") 
print(functools.reduce(operator.add, ["geeks", "for", "geeks"])) 

Output
The sum of the list elements is : 17
The product of list elements is : 180
The concatenated product is : geeksforgeeks


reduce() vs accumulate() 

Both reduce() and accumulate() can be used to calculate the summation of a sequence elements. But there are differences in the implementation aspects in both of these.  

reduce() is defined in “functools” module, accumulate() in “itertools” module.
reduce() stores the intermediate result and only returns the final summation value. Whereas, accumulate() returns a iterator containing the intermediate results. The last number of the iterator returned is summation value of the list.
reduce(fun, seq) takes function as 1st and sequence as 2nd argument. In contrast accumulate(seq, fun) takes sequence as 1st argument and function as 2nd argument.

# python code to demonstrate summation 
# using reduce() and accumulate() 
  
# importing itertools for accumulate() 
import itertools 
  
# importing functools for reduce() 
import functools 
  
# initializing list 
lis = [1, 3, 4, 10, 4] 
  
# printing summation using accumulate() 
print("The summation of list using accumulate is :", end="") 
print(list(itertools.accumulate(lis, lambda x, y: x+y))) 
  
# printing summation using reduce() 
print("The summation of list using reduce is :", end="") 
print(functools.reduce(lambda x, y: x+y, lis)) 
Output
The summation of list using accumulate is :[1, 4, 8, 18, 22]
The summation of list using reduce is :22


educe() function with three parameters

Reduce function i.e. reduce() function works with 3 parameters in python3 as well as for 2 parameters. To put it in a simple way reduce() places the 3rd parameter before the value of the second one, if it’s present. Thus, it means that if the 2nd argument is an empty sequence, then 3rd argument serves as the default one. 

 Here is an example :(This example has been take from the  functools.reduce() documentation includes a Python version of the function:


# Python program to  illustrate sum of two numbers. 
def reduce(function, iterable, initializer=None): 
    it = iter(iterable) 
    if initializer is None: 
        value = next(it) 
    else: 
        value = initializer 
    for element in it: 
        value = function(value, element) 
    return value 
  
# Note that the initializer, when not None, is used as the first value instead of the first value from iterable , and after the whole iterable. 
tup = (2,1,0,2,2,0,0,2) 
print(reduce(lambda x, y: x+y, tup,6)) 
  
# This code is contributed by aashutoshjha
Output
15




