Python Dictionary Comprehension Example
Here we have two lists named keys and value and we are iterating over them with the help of zip() function.


# Python code to demonstrate dictionary 
# comprehension
 
# Lists to represent keys and values
keys = ['a','b','c','d','e']
values = [1,2,3,4,5]  
 
# but this line shows dict comprehension here  
myDict = { k:v for (k,v) in zip(keys, values)}  
 
# We can use below too
# myDict = dict(zip(keys, values))  
 
print (myDict)
Output :

{'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}


Using fromkeys() Method
Here we are using the fromkeys() method that returns a dictionary with specific keys and values.


dic=dict.fromkeys(range(5), True)
 
print(dic)
Output:

{0: True, 1: True, 2: True, 3: True, 4: True}

Using dictionary comprehension make dictionary
Example 1:


# Python code to demonstrate dictionary 
# creation using list comprehension
myDict = {x: x**2 for x in [1,2,3,4,5]}
print (myDict)
Output :

{1: 1, 2: 4, 3: 9, 4: 16, 5: 25}


Example 2:


sDict = {x.upper(): x*3 for x in 'coding '}
print (sDict)
Output :

{'O': 'ooo', 'N': 'nnn', 'I': 'iii', 'C': 'ccc', 'D': 'ddd', 'G': 'ggg'}



Using conditional statements in dictionary comprehension
Example 1:

We can use Dictionary comprehensions with if and else statements and with other expressions too. This example below maps the numbers to their cubes that are not divisible by 4.


# Python code to demonstrate dictionary 
# comprehension using if.
newdict = {x: x**3 for x in range(10) if x**3 % 4 == 0}
print(newdict)
Output :

{0: 0, 8: 512, 2: 8, 4: 64, 6: 216}



Using nested dictionary comprehension
Here we are trying to create a nested dictionary with the help of dictionary comprehension.


# given string
l="GFG"
 
# using dictionary comprehension
dic = {
    x: {y: x + y for y in l} for x in l
}
 
print(dic)
Output:

{'G': {'G': 'GG', 'F': 'GF'}, 'F': {'G': 'FG', 'F': 'FF'}}
Given String:

The given string is "GFG". It contains three characters: 'G', 'F', and 'G'.
Dictionary Comprehension:

The code uses nested dictionary comprehension to create a nested dictionary.
The outer loop iterates over each character x in the string "GFG".
For each character x, the inner loop iterates over each character y in the string "GFG".
For each inner loop iteration, it creates a key-value pair where the key is the character y, and the value is the concatenation of characters x and y.
Explanation of Output:

The resulting dictionary dic has two top-level keys: 'G' and 'F'.
For each top-level key 'G' and 'F', there is an inner dictionary.
For the key 'G', the inner dictionary has keys 'G' and 'F', with corresponding values 'GG' and 'GF'.
For the key 'F', the inner dictionary has keys 'G' and 'F', with corresponding values 'FG' and 'FF'.
Output:

The output is the nested dictionary dic, which contains the key-value pairs generated by the dictionary comprehension.
Here's a breakdown of the output:

arduino
Copy code
{
    'G': {'G': 'GG', 'F': 'GF'}, 
    'F': {'G': 'FG', 'F': 'FF'}
}
The key 'G' has an inner dictionary with keys 'G' and 'F', and their corresponding values are 'GG' and 'GF'.
The key 'F' has an inner dictionary with keys 'G' and 'F', and their corresponding values are 'FG' and 'FF'.
This structure demonstrates how the nested dictionary comprehension constructs a dictionary with combinations of characters from the given string.



