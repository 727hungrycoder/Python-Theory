Python is a very popular language among developers and is used in a variety of applications. Learning advanced Python can help you get a new job, or get a promotion.

If you have studied basic Python, there is no harm in learning advanced Python as it will only help you in your career. We have all major advanced Python concepts, the list is designed in a systematic order so that you can easily learn these concepts in a flow.

In this advanced Python tutorial, you will learn the following things:

Table of Content

Advanced Conditional Statements
Regular Expressions
OOPS
ITERABLES, ITERATORS and Generators
CLOSURES and DECORATORS
Memory Management
Testing


Advanced Conditional Statements
List Comprehension
Python Dictionary Comprehension
Lambda Operator
Filter
Reduce
Map
Recursive Functions


numbers = [12, 13, 14,] 
doubled = [x *2 for x in numbers] 
print(doubled)


# Using list comprehension to iterate through loop 
List = [character for character in [1, 2, 3]] 

# Displaying list 
print(List)


list = [i for i in range(11) if i % 2 == 0] 
print(list)


matrix = [[j for j in range(3)] for i in range(3)] 
	
print(matrix)


The provided code snippet measures the time taken by a function named for_loop() to execute a loop iterating one million times. Here's how it works:

Start Time Measurement: begin = time.time()

This line records the current time using the time.time() function from the time module and assigns it to the variable begin. This marks the beginning of the time measurement.
Loop Execution: for_loop(10**6)

This line calls the for_loop() function with the argument 10**6, which represents one million iterations of the loop.
End Time Measurement: end = time.time()

After the loop completes, this line records the current time again using time.time() and assigns it to the variable end. This marks the end of the time measurement.
Calculate and Display Time Taken:

The difference between end and begin represents the time taken for the loop to execute.
print('Time taken for_loop:', round(end-begin, 2)) prints out the time taken by the loop in seconds. The round() function is used to round the time to two decimal places for readability.
Overall, this code snippet is a simple way to measure the execution time of a piece of code, which can be helpful for performance analysis and optimization purposes.


# Import required module 
import time 


# define function to implement for loop 
def for_loop(n): 
	result = [] 
	for i in range(n): 
		result.append(i**2) 
	return result 


# define function to implement list comprehension 
def list_comprehension(n): 
	return [i**2 for i in range(n)] 


# Driver Code 

# Calculate time taken by for_loop() 
begin = time.time() 
for_loop(10**6) 
end = time.time() 

# Display time taken by for_loop() 
print('Time taken for_loop:', round(end-begin, 2)) 

# Calculate time takens by list_comprehension() 
begin = time.time() 
list_comprehension(10**6) 
end = time.time() 

# Display time taken by for_loop() 
print('Time taken for list_comprehension:', round(end-begin, 2)) 


# using lambda to print table of 10 
numbers = list(map(lambda i: i*10, [i for i in range(1, 6)])) 

print(numbers) 
lis = ["Even number" if i % 2 == 0
	else "Odd number" for i in range(8)] 
print(lis) 

lis = [num for num in range(100) 
	if num % 5 == 0 if num % 10 == 0] 
print(lis)


# Getting square of number from 1 to 10 
squares = [n**2 for n in range(1, 11)] 

# Display square of even numbers 
print(squares) 


Toggle the case of each character in a String
In this example, we toggle the case of each character in a given string using the XOR operator with 32 and store the result in a list.


# Initializing string 
string = 'Geeks4Geeks'
  
# Toggle case of each character 
List = list(map(lambda i: chr(ord(i) ^ 32), string)) 
  
# Display list 
print(List) 
Output

['g', 'E', 'E', 'K', 'S', '\x14', 'g', 'E', 'E', 'K', 'S']

Reverse each string in a Tuple
In this example, we are reversing strings in for loop and inserting them into the list, and printing the list.


# Reverse each string in tuple 
List = [string[::-1] for string in ('Geeks', 'for', 'Geeks')] 
  
# Display list 
print(List) 
Output

['skeeG', 'rof', 'skeeG']


Creating a list of Tuples from two separate Lists
In this example, we have created two lists of names and ages. We are using zip()  in list comprehension and we are inserting the name and age as a tuple to list. Finally, we are printing the list of tuples.


names = ["G", "G", "g"] 
ages = [25, 30, 35] 
person_tuples = [(name, age) for name, age in zip(names, ages)] 
print(person_tuples)
Output:

[('G', 25), ('G', 30), ('g', 35)]


isplay the sum of digits of all the odd elements in a list.
In this example, We have created a list and we are finding the digit sum of every odd element in the list.


# Explicit function 
def digitSum(n): 
    dsum = 0
    for ele in str(n): 
        dsum += int(ele) 
    return dsum 
  
  
# Initializing list 
List = [367, 111, 562, 945, 6726, 873] 
  
# Using the function on odd elements of the list 
newList = [digitSum(i) for i in List if i & 1] 
  
# Displaying new list 
print(newList) 
Output

[16, 3, 18, 18]





